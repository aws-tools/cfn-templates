{
  "AWSTemplateFormatVersion": "2010-09-09", 

  "Description": "Linux DevOps EC2 instance with AWS and third-party Code, Repo, Build and Release tools",

  "Parameters": {

    "InstanceType": {
      "Description": "EC2 instance type, e.g. m3.medium, m3.large, etc.",
      "Type": "String",
      "Default": "m3.medium"
    },

    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable remote access to the development server",
      "Type": "String"
    },

    "ImageId": {
      "Description" : "AMI ID to be used for instance deployment",
      "Type" : "String",
      "AllowedPattern" : "^(?:ami-[0-9a-f]{8})$",
      "ConstraintDescription" : "AMI Id needs to start with ami-"
    },

    "AdminCidr": {
      "Description": "CIDR block who can access Development Server instance via admin tools",
      "Type": "String",
      "Default": "0.0.0.0/0",
      "ConstraintDescription": "CIDR block address must be in the form n.n.n.n/m",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    }

  },

  "Resources": {

    "AdminRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/",
        "Policies": [ {
          "PolicyName": "admin",
          "PolicyDocument": {
            "Statement": [ {
              "Effect": "Allow",
              "Action": "*",
              "Resource": "*"
            } ]
          }
        } ]
      }
    },

    "AdminInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ {
          "Ref": "AdminRole"
        } ]
      }
    },

    "DevOpsInstance": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "git" : [],
                "jq" : [],
                "java-1.7.0-openjdk" : [],
                "mysql55" : []
              },
              "rubygems" : {
                "bundler" : [],
                "cloudformation-ruby-dsl" : []
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": { "Ref": "ImageId" },
        "InstanceType": { "Ref": "InstanceType" }, 
        "IamInstanceProfile": { "Ref": "AdminInstanceProfile" },
        "KeyName": { "Ref": "KeyName" }, 
        "SecurityGroups": [ { "Ref": "AdminSecurityGroup" } ], 
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [ "", [
              "#!/bin/bash\n",
  
              "# Apply updates cfn-init bootstrapper helper scripts\n",
              "yum update -y aws-cfn-bootstrap\n",
              "/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackName" }, " -r DevOpsInstance --region ", { "Ref" : "AWS::Region" }, " || echo 'Failed to run cfn-init'\n",
              "/opt/aws/bin/cfn-signal -e $? '", { "Ref" : "WaitHandle" }, "'\n"
            ] ]
          }
        },
        "Tags" : [ { "Key" : "Name", "Value" : "Linux DevOps Instance" } ]
      }
    },

    "AdminSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "SSH access on port 22", 
        "SecurityGroupIngress": [ { "CidrIp": { "Ref" : "AdminCidr" }, "FromPort": "22", "IpProtocol": "tcp", "ToPort": "22" } ]
      }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "DevOpsInstance",
      "Properties" : {
        "Handle" : {"Ref" : "WaitHandle"},
        "Timeout" : "1500"
      }
    }

  },

  "Outputs": {

    "DevOpsServerLinuxDns": {
      "Description": "DNS Name of the newly created DevOps Linux instance",
      "Value": { "Fn::GetAtt": [ "DevOpsInstance", "PublicDnsName" ] }
    },

    "DevOpsServerLinuxIp": {
      "Description": "Public IP of the newly created DevOps Linux instance",
      "Value": { "Fn::GetAtt": [ "DevOpsInstance", "PublicIp" ] }
    }

  }

}
